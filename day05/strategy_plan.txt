Day 5: Print Queue - Strategy Plan

PROBLEM UNDERSTANDING:
- Two sections in input: ordering rules (X|Y format) and update lists (comma-separated)
- Rule X|Y means if both X and Y appear in an update, X must come before Y
- Find updates that are already correctly ordered
- For correctly ordered updates, find middle page number and sum them

DATA STRUCTURES:
1. rules: dict or set to store ordering constraints
   - Could use dict of sets: {page: set_of_pages_that_must_come_after}
   - Or set of tuples: {(before, after), ...}

2. updates: list of lists, each inner list represents an update sequence

ALGORITHM:
1. Parse input:
   - Split on empty line to separate rules from updates
   - Parse rules into constraint structure
   - Parse updates into list of integer lists

2. For each update:
   - Check if it satisfies all applicable rules
   - A rule X|Y applies only if both X and Y are in the update
   - For applicable rules, verify X appears before Y in the sequence

3. For valid updates:
   - Find middle element (index len(update)//2)
   - Sum all middle elements

FUNCTIONS NEEDED:
- parse_input(filename): Parse rules and updates from file
- is_valid_update(update, rules): Check if update follows all applicable rules
- get_middle_page(update): Get middle page number
- solve(): Main solution function

IMPLEMENTATION APPROACH:
- Use dictionary of sets for rules: {page: {pages_that_must_come_after}}
- For validation, check each rule against actual positions in update
- Handle case where not all pages from rules appear in each update

DETAILED PARSING AND DATA STRUCTURE EXPLANATION:

INPUT FORMAT ANALYSIS:
The input has two sections separated by an empty line:
```
47|53    <- Rules section (X|Y format)
97|13
...
         <- Empty line separator
75,47,61,53,29    <- Updates section (comma-separated)
97,61,53,29,13
...
```

STEP 1: FILE READING AND SPLITTING
```python
with open(filename, 'r') as f:
    content = f.read().strip()

sections = content.split('\n\n')  # Split on empty line
rules_section = sections[0]       # First part: rules
updates_section = sections[1]     # Second part: updates
```
Key concepts:
- strip() removes whitespace from beginning/end
- split('\n\n') splits on double newlines (empty line separator)
- This gives us two distinct sections to process separately

STEP 2: RULES DATA STRUCTURE CHOICE
Dictionary of sets chosen:
```python
rules = {
    47: {29, 13, 61, 53},  # Page 47 must come before pages 29, 13, 61, 53
    97: {75, 13, 47, 61, 53, 29},  # Page 97 must come before these pages
}
```
Why this structure?
- Dictionary key: The "before" page (fast O(1) lookup)
- Set value: All pages that must come "after" this key
- Sets are perfect because:
  - No duplicates automatically
  - Fast O(1) membership testing (if after_page in after_pages)
  - We don't care about order within the set

STEP 3: RULES PARSING LOGIC
```python
rules = {}
for rule_line in rules_section.split('\n'):
    before, after = map(int, rule_line.split('|'))
    if before not in rules:
        rules[before] = set()  # Create empty set if first time seeing this page
    rules[before].add(after)   # Add the "after" page to this "before" page's set
```
Step-by-step breakdown:
1. rules_section.split('\n') → ['47|53', '97|13', '97|61', ...]
2. rule_line.split('|') → ['47', '53'] 
3. map(int, ...) → 47, 53 (converts strings to integers)
4. Dictionary check: Create empty set if key doesn't exist yet
5. Add the "after" page to the set

Example trace:
- Processing "47|53": before=47, after=53 → rules[47] = {53}
- Processing "47|61": before=47, after=61 → rules[47] = {53, 61}
- Processing "97|47": before=97, after=47 → rules[97] = {47}

STEP 4: UPDATES PARSING
```python
updates = []
for update_line in updates_section.split('\n'):
    update = [int(x) for x in update_line.split(',')]
    updates.append(update)
```
Creates list of lists: [[75, 47, 61, 53, 29], [97, 61, 53, 29, 13], ...]

ALTERNATIVE DATA STRUCTURE APPROACHES CONSIDERED:
- List of tuples: rules = [(47, 53), (97, 13), ...] (Less efficient for lookups)
- Dictionary of lists: rules = {47: [53, 61, 29, 13], ...} (Works, but sets better for membership)
- Set of tuples: rules = {(47, 53), (97, 13), ...} (Good for simple existence checks)

WHY DICTIONARY-OF-SETS IS OPTIMAL:
Makes validation logic very efficient:
```python
if before_page in rules:          # Dictionary lookup: O(1)
    if after_page in after_pages: # Set membership: O(1)
        # Check constraint violation
```

TIME COMPLEXITY:
- Building rules: O(R) where R = number of rules
- Validating each update: O(U × R) where U = update length, R = applicable rules
- Overall very efficient for the problem size

PART 2 ANALYSIS:

PROBLEM TRANSFORMATION:
- Part 1: Validation problem (is this update correctly ordered?)
- Part 2: Sorting problem (fix the incorrectly ordered updates!)

KEY DIFFERENCES:
- Part 1: Sum middle pages from VALID updates → Answer: 4281
- Part 2: Take INVALID updates, fix their ordering, sum middle pages from corrected updates

ALGORITHM CHALLENGE:
This is essentially a topological sorting problem:
- Rules define dependencies: 47|53 means 47 must come before 53
- Need to arrange pages so all applicable rules are satisfied
- Like ordering tasks with prerequisites

EXAMPLE FROM TASK:
Invalid updates and their corrections:
- 75,97,47,61,53 → 97,75,47,61,53 (middle: 47)
- 61,13,29       → 61,29,13       (middle: 29)  
- 97,13,75,29,47 → 97,75,47,29,13 (middle: 47)
Expected sum: 47 + 29 + 47 = 123

IMPLEMENTATION APPROACHES FOR PART 2:

Option 1: Custom Comparator with Sorting
- Create comparison function based on rules
- Use Python's sorted() with custom key/comparator
- For pages A,B: A comes before B if rule A|B exists

Option 2: Topological Sort
- Build directed graph from applicable rules for each update
- Perform topological sort to get correct ordering
- More complex but theoretically sound

Option 3: Iterative Rule-Based Sorting
- Start with invalid update
- Repeatedly find and fix rule violations
- Continue until no violations remain

DIFFICULTY ASSESSMENT:
- Part 1: Medium (validation logic)
- Part 2: Medium-Hard (requires sorting algorithm knowledge)

NEW FUNCTIONS NEEDED FOR PART 2:
- fix_update_ordering(update, rules): Sort pages according to rules
- solve_part2(): Main function for part 2
- Custom comparison logic or topological sort implementation